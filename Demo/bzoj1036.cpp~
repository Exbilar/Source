#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

static const int maxm=6e5+10;
static const int INF=~(1<<31);

int depth[maxm],size[maxm],first[maxm],pos[maxm];
int father[maxm],nxt[maxm],to[maxm],val[maxm],bl[maxm];
int sum[maxm],mx[maxm],left[maxm],right[maxm];
char ch[10];
int n,q,cnt,sz;

void ins(int f,int t){
    nxt[++cnt]=first[f];
    first[f]=cnt;
    to[cnt]=t;
}

void init(){
    scanf("%d",&n);
    for(int i=1;i<n;i++){
	int u,v;
	scanf("%d%d",&u,&v);
	ins(u,v);ins(v,u);
    }
    for(int i=1;i<=n;i++)scanf("%d",&val[i]);
}

void dfs1(int x){
    size[x]=1;
    for(int u=first[x];u;u=nxt[u]){
	int v=to[u];
	if(v==father[x])continue;
	depth[v]=depth[x]+1;
	father[v]=x;
	dfs1(v);
	size[x]+=size[v];
    }
}

void dfs2(int x,int chain){
    int k=0;sz++;
    pos[x]=sz;
    bl[x]=chain;
    for(int u=first[x];u;u=nxt[u]){
	int v=to[u];
	if(depth[v]>depth[x]&&size[v]>size[k])k=v;
    }
    if(!k)return;
    dfs2(k,chain);
    for(int u=first[x];u;u=nxt[u]){
	int v=to[u];
	if(depth[v]>depth[x]&&k!=v)dfs2(v,v);
    }
}

void build(int id,int l,int r){
    left[id]=l;right[id]=r;
    if(l==r)return;
    int mid=(l+r)>>1;
    build(id<<1,l,mid);
    build(id<<1|1,mid+1,r);
}

void change(int id,int x,int y){
    if(left[id]>x||right[id]<x)return;
    if(left[id]==right[id]&&left[id]==x){sum[id]=mx[id]=y;return;}
    change(id<<1,x,y);
    change(id<<1|1,x,y);
    sum[id]=sum[id<<1]+sum[id<<1|1];
    mx[id]=max(mx[id<<1],mx[id<<1|1]);
}

int Querysum(int id,int l,int r){
    if(left[id]>=l&&right[id]<=r)return sum[id];
    if(left[id]>r||right[id]<l)return 0;
    return (Querysum(id<<1,l,r)+Querysum(id<<1|1,l,r));
}

int Querymax(int id,int l,int r){
    if(left[id]>=l&&right[id]<=r)return mx[id];
    if(left[id]>r||right[id]<l)return -INF;
    return max(Querymax(id<<1,l,r),Querymax(id<<1|1,l,r));
}

int solvesum(int x,int y){
    int sum=0;
    while(bl[x]!=bl[y]){
	if(depth[bl[x]]<depth[bl[y]])swap(x,y);
	sum+=Querysum(1,pos[bl[x]],pos[x]);
	x=father[bl[x]];
    }
    if(pos[x]>pos[y])swap(x,y);
    sum+=Querysum(1,pos[x],pos[y]);
    return sum;
}

int solvemax(int x,int y){
    int MAX=-INF;
    while(bl[x]!=bl[y]){
	if(depth[bl[x]]<depth[bl[y]])swap(x,y);
	MAX=max(Querymax(1,pos[bl[x]],pos[x]),MAX);
	x=father[bl[x]];
    }
    if(pos[x]>pos[y])swap(x,y);
    MAX=max(Querymax(1,pos[x],pos[y]),MAX);
    return MAX;
}

void solve(){
    int x,y;
    build(1,1,n);
    for(int i=1;i<=n;i++)
	change(1,pos[i],val[i]);
    scanf("%d",&q);

    while(q--){
	scanf("%s%d%d",ch,&x,&y);
	if(ch[0]=='C'){val[x]=y;change(1,pos[x],y);}
	else{
	    if(ch[1]=='M')printf("%d\n",solvemax(x,y));
	    else printf("%d\n",solvesum(x,y));
	}
    }
}

int main(){
    init();
    dfs1(1);
    dfs2(1,1);
    solve();
    return 0;
}
